package main

import (
	"context"
	"fmt"
	"time"

	"github.com/ad/llm-proxy/processor/internal/config"
	"github.com/ad/llm-proxy/processor/internal/worker"
	"github.com/ad/llm-proxy/processor/pkg/ollama"
)

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è work-stealing
type DemoWorkerClient struct{}

func (d *DemoWorkerClient) CompleteTask(ctx context.Context, id, procID, status, result, errMsg string) error {
	return nil
}

func (d *DemoWorkerClient) RequeueTask(ctx context.Context, id, procID, reason string) error {
	return nil
}

func (d *DemoWorkerClient) ReleaseTask(ctx context.Context, id string) error {
	return nil
}

func (d *DemoWorkerClient) ClaimTasksBatch(ctx context.Context, procID string, batchSize, timeoutMs int) ([]worker.Task, error) {
	return nil, nil
}

func (d *DemoWorkerClient) SendHeartbeat(ctx context.Context, taskID, procID string) error {
	return nil
}

func (d *DemoWorkerClient) SendProcessorHeartbeat(ctx context.Context, procID string, cpu, mem *float64, queue *int) error {
	return nil
}

func (d *DemoWorkerClient) TriggerCleanup(ctx context.Context) error {
	return nil
}

func (d *DemoWorkerClient) WorkSteal(ctx context.Context, processorID string, maxStealCount int, timeoutMs int) ([]worker.Task, error) {
	fmt.Printf("üîÑ WorkSteal called: processor=%s, maxCount=%d, timeout=%dms\n", processorID, maxStealCount, timeoutMs)

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–æ—Ä–æ–≤—Å—Ç–≤–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
	return []worker.Task{
		{
			ID:          "stolen-task-1",
			ProductData: "Stolen task data",
			Priority:    1,
		},
	}, nil
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Ollama
type DemoOllamaClient struct{}

func (d *DemoOllamaClient) EnsureModelAvailable(model string) error {
	return nil
}

func (d *DemoOllamaClient) GenerateWithParams(ctx context.Context, model string, productData string, params *ollama.OllamaParams) (string, error) {
	return "Generated result for: " + productData, nil
}

func main() {
	fmt.Println("üöÄ Work-Stealing Demo")
	fmt.Println("====================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º work-stealing
	cfg := &config.Config{
		WorkerCount:       2,
		RequestTimeout:    10 * time.Second,
		ProcessorID:       "demo-processor",
		HeartbeatInterval: time.Minute,
		PollInterval:      time.Second,
		WorkStealing: config.WorkStealingConfig{
			Enabled:       true,
			Interval:      3 * time.Second, // –ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–µ–º–æ
			MaxStealCount: 2,
			MinCapacity:   0.3,
		},
	}

	fmt.Printf("üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Work-Stealing:\n")
	fmt.Printf("   Enabled: %v\n", cfg.WorkStealing.Enabled)
	fmt.Printf("   Interval: %v\n", cfg.WorkStealing.Interval)
	fmt.Printf("   MaxStealCount: %d\n", cfg.WorkStealing.MaxStealCount)
	fmt.Printf("   MinCapacity: %.1f\n", cfg.WorkStealing.MinCapacity)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
	workerClient := &DemoWorkerClient{}
	_ = &DemoOllamaClient{} // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ

	fmt.Println("‚ö° –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ work-stealing...")
	fmt.Println("–ü–æ–ª–ª–µ—Ä –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è —É–∫—Ä–∞—Å—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã")
	fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –¥–µ–º–æ
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		// –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –±—ã–ª –±—ã pol.Start(ctx)
		// –î–ª—è –¥–µ–º–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º work-stealing –≤—Ä—É—á–Ω—É—é
		ticker := time.NewTicker(cfg.WorkStealing.Interval)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				fmt.Printf("‚è∞ [%s] –ü–æ–ø—ã—Ç–∫–∞ work-stealing...\n", time.Now().Format("15:04:05"))

				// –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ WorkSteal
				stolenTasks, err := workerClient.WorkSteal(ctx, cfg.ProcessorID, cfg.WorkStealing.MaxStealCount, int(cfg.RequestTimeout.Milliseconds()))
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ work-stealing: %v\n", err)
					continue
				}

				if len(stolenTasks) > 0 {
					fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω–æ %d –∑–∞–¥–∞—á:\n", len(stolenTasks))
					for _, task := range stolenTasks {
						fmt.Printf("   - %s: %s\n", task.ID, task.ProductData)
					}
				} else {
					fmt.Printf("‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤–æ—Ä–æ–≤—Å—Ç–≤–∞\n")
				}
				fmt.Println()
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-ctx.Done()
	fmt.Println("\nüèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}
