name: Release on version change

on:
  push:
    branches: [main]
    paths:
      - 'config.json'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get previous version from mains
        id: old
        run: |
          git fetch origin main --depth=2
          git show HEAD^:config.json > old_config.json || echo '{"version":"none"}' > old_config.json
          echo "old_version=$(jq -r .version old_config.json)" >> $GITHUB_OUTPUT

      - name: Get new version
        id: new
        run: echo "new_version=$(jq -r .version config.json)" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        run: |
          echo "Old version: ${{ steps.old.outputs.old_version }}"
          echo "New version: ${{ steps.new.outputs.new_version }}"
          if [ "${{ steps.old.outputs.old_version }}" = "${{ steps.new.outputs.new_version }}" ]; then
            echo "No version change"
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed"
            echo "continue=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no version change
        if: steps.check.outputs.continue == 'false'
        run: echo "Skipping build"

      - name: Set up Go
        if: steps.check.outputs.continue == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Build and compress
        if: steps.check.outputs.continue == 'true'
        run: make release

      - name: Create GitHub Release
        if: steps.check.outputs.continue == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new.outputs.new_version }}
          name: v${{ steps.new.outputs.new_version }}
          files: dist/*
